// Generated by CoffeeScript 2.7.0
var test_runner_class;

test_runner_class = class test_runner_class {
  is_string(a) {
    return typeof a === "string";
  }

  to_json(a) {
    return JSON.stringify(a).replace(/,(?=\S)/g, ", ");
  }

  is_plain_object(a) {
    return (a != null) && typeof a === "object" && a.constructor === Object;
  }

  any_to_array(a) {
    if (Array.isArray(a)) {
      return a;
    } else {
      return [a];
    }
  }

  object_merge(a, b) {
    var k, v;
    for (k in b) {
      v = b[k];
      if (this.is_plain_object(v) && this.is_plain_object(a[k])) {
        a[k] = this.object_merge(a[k], v);
      } else {
        a[k] = v;
      }
    }
    return a;
  }

  report_compact_failure_strings(inp, exp, out) {
    var a;
    return [
      ((function() {
        var j,
      len,
      results1;
        results1 = [];
        for (j = 0, len = inp.length; j < len; j++) {
          a = inp[j];
          results1.push(this.to_json(a));
        }
        return results1;
      }).call(this)).join(", "),
      this.to_json(exp),
      this.to_json(out)
    ];
  }

  report_compact(results) {
    var exp, exp_string, index, inp, inp_string, j, l, len, len1, name, out, out_string, results1, status, test_results;
    results1 = [];
    for (j = 0, len = results.length; j < len; j++) {
      [name, ...test_results] = results[j];
      process.stdout.write(name);
      for (l = 0, len1 = test_results.length; l < len1; l++) {
        [status, index, name, inp, exp, out] = test_results[l];
        if (status) {
          process.stdout.write(` ${index}`);
        } else {
          [inp_string, exp_string, out_string] = this.report_compact_failure_strings(inp, exp, out);
          process.stdout.write([`\n  failure ${name} ${index}`, `inp ${inp_string}`, `exp ${exp_string}`, `out ${out_string}`].join("\n  "));
        }
      }
      results1.push(console.log(""));
    }
    return results1;
  }

  constructor(options) {
    var default_options;
    default_options = {
      reporter: this.report_compact
    };
    this.options = this.object_merge(default_options, options);
    this.options.reporter = this.options.reporter.bind(this);
  }

  execute_tests(tests) {
    var context, exp, exp_string, f, i, inp, j, l, len, name, name_or_context, out, out_string, ref, rest, results, results1, status;
    status = true;
    results1 = [];
    for (j = 0, len = tests.length; j < len; j++) {
      [f, ...rest] = tests[j];
      if (!status) {
        break;
      }
      [name, context] = Array.isArray(f) ? ([name_or_context, f] = f, this.is_string(name_or_context) ? [name_or_context, null] : [f.name, name_or_context]) : [f.name, null];
      results = [name];
      for (i = l = 0, ref = rest.length; l < ref; i = l += 2) {
        inp = this.any_to_array(rest[i]);
        exp = rest[i + 1];
        out = f.apply(context, inp);
        out_string = this.to_json(out);
        exp_string = this.to_json(exp);
        status = out_string === exp_string;
        results.push([status, i / 2, name, inp, exp, out]);
        if (!status) {
          break;
        }
      }
      results1.push(results);
    }
    return results1;
  }

  execute(tests) {
    return this.options.reporter(this.execute_tests(tests));
  }

};
