#!/usr/bin/guile
!#

(import (sph filesystem) (sph hashtable) (sph io) (sph list) (sph number) (sph other) (sph process) (sph string) (sph vector) (sph) (sph process create) (sph cli) (rnrs bytevectors) (sph storage dg))

(define import-2015-2017
  "import the data from a file created with dg-export-2015 in a dg-2017 database.
   # id translation
   * type ide:, dg-id-create, memoise old->new
   * type extern: dg-extern-create, memoise old->new
   * type intern: dg-intern-create, memoise old->new
   * type pair: dg-relation-create, translate left/right to new ids
   * type alias: dg-relation-create with context \"dg-2015-alias\", translate identifiers")

;-- dg-2015 specific
;
(define dg-2015-bits-type-ide 0)
(define dg-2015-bits-type-pair 1)
(define dg-2015-bits-type-intern 2)
(define dg-2015-bits-type-extern 3)
(define dg-2015-bits-type 3)
(define (dg-2015-intern? id) (= dg-2015-bits-type-intern (logand id dg-2015-bits-type)))
(define (dg-2015-extern? id) (= dg-2015-bits-type-extern (logand id dg-2015-bits-type)))
(define (dg-2015-ide? id) (= dg-2015-bits-type-ide (logand id dg-2015-bits-type)))
(define (dg-2015-pair? id) (= dg-2015-bits-type-pair (logand id dg-2015-bits-type)))

(define (dg-2015-id->type id) "integer -> string:type-name"
  (cond ((dg-2015-intern? id) "intern") ((dg-2015-pair? id) "pair")
    ((dg-2015-extern? id) "extern") ((dg-2015-ide? id) "id")))

;-- dg-2015-2017
;
(define (list-trim-right a b) (reverse (drop-while (l (a) (eqv? b a)) (reverse a))))

(define (relation-part-inexistant old-left old-right new-left new-right)
  (display
    (string-append
      (string-join
        (pair "info: relation part inexistant:"
          (map (l (a b) (string-append b ":" (if a (number->string a 32) "_")))
            (list old-left old-right new-left new-right) (list "old-l" "old-r" "new-l" "new-r")))
        " ")
      " " (dg-2015-id->type old-left) " " (dg-2015-id->type old-right) "\n")))

(define (create-nodes export-data id-old->new) "create nodes and initialise id-old->new"
  (dg-txn-call-write
    (l (txn)
      (each
        (l (a)
          (let (id-old (first (tail a)))
            (case (first a)
              ( (id alias)
                (let (id-new (dg-id-create txn)) (ht-set! id-old->new id-old (first id-new))))
              ( (extern)
                (let (id-new (dg-extern-create txn)) (ht-set! id-old->new id-old (first id-new))))
              ( (intern)
                (let
                  (id-new
                    (dg-intern-ensure txn
                      (list (u8-list->bytevector (list-trim-right (tail (tail a)) 0)))))
                  (ht-set! id-old->new id-old (first id-new)))))))
        export-data))))

(define (create-relations export-data id-old->new) "create nodes and initialise id-old->new"
  (dg-txn-call-write
    (l (txn)
      (each
        (l (a)
          (let (id-old (first (tail a)))
            (case (first a)
              ( (pair)
                (apply
                  (l (old-left old-right ordinal-left ordinal-right)
                    (let
                      ( (new-left (ht-ref id-old->new old-left))
                        (new-right (ht-ref id-old->new old-right)))
                      (if (and new-left new-right)
                        (dg-relation-ensure txn (list new-left) (list new-right))
                        (relation-part-inexistant old-left old-right new-left new-right))))
                  (tail (tail a))))
              ( (alias)
                (apply
                  (l (old-left old-right new-left new-right)
                    (if (and new-left new-right)
                      (dg-relation-ensure txn (list new-left)
                        (list new-right) (dg-intern-ensure txn (list "dg-2015-alias")))
                      (relation-part-inexistant old-left old-right new-left new-right)))
                  (append (tail a) (map (l (a) (ht-ref id-old->new a)) (tail a))))))))
        export-data))))

(define (dg-import-2015-2017 export-data target-dg-root)
  "creates nodes and re-creates relations with new ids"
  (let (id-old->new (ht-make-eqv 500))
    (dg-use target-dg-root (create-nodes export-data id-old->new)
      (create-relations export-data id-old->new))
    id-old->new))

(define (dg-export-2015-files source-dg-root target-directory)
  "imports into a temporary dg-2017 database for querying, then extracts data from old data model and
   creates it with the new data model in the target database"
  (let*
    ; create temp db
    ( (export-data (dg-export-2015 source-dg-root)) (temp-db (tmpnam))
      (target-directory (ensure-trailing-slash target-directory))
      (id-old->new
        (if (file-exists? temp-db) (ht-make-eqv 500) (dg-import-2015-2017 export-data temp-db)))
      (file-info
        ; queries to extract old structures
        (dg-use temp-db #t
          (dg-txn-call-read
            (l (txn)
              (let*
                ( (source-files (string-append (ensure-trailing-slash source-dg-root) "files/"))
                  (id-new->old (ht-copy* id-old->new (l (a) (ht-invert! a))))
                  (id-dg-2015-alias (dg-intern-data->id txn (list "dg-2015-alias")))
                  (old-aliases
                    (map
                      (l (a)
                        (pair a
                          (dg-relation-select-read txn #f
                            (dg-intern-data->id txn (list a)) id-dg-2015-alias (q left))))
                      (list "facet" "file" "cms-type")))
                  (tags
                    (dg-relation-select-read txn (alist-ref old-aliases "facet") #f #f (q right)))
                  (files
                    (filter dg-extern?
                      (dg-relation-select-read txn (alist-ref old-aliases "file") #f #f (q right))))
                  (files-old (map (l (a) (ht-ref id-new->old a)) files))
                  (file-old-paths
                    (map (l (a) (string-append source-files (number->string a 16))) files-old)))
                (map
                  (l (file path)
                    (alist-q tags
                      (dg-intern-id->string txn
                        (dg-relation-select-read txn tags (list file) #f (q left)))
                      file file path path))
                  files file-old-paths)))))))
    ; copy old files with names that include tag strings
    (ensure-directory-structure target-directory)
    (each
      (l (a)
        (alist-bind a (tags path file)
          (copy-file path
            (string-append target-directory
              (string-join (pair (number->string file 32) (if (null? tags) (list "other") tags))
                ".")))))
      file-info)
    (system* "rm" (string-append temp-db "/data"))))

(define (dg-export-2015 dg-root)
  (execute-with-pipes
    (l (child-out)
      (let loop ((a (read child-out))) (if (eof-object? a) (list) (pair a (loop (read child-out))))))
    "./exe/dg-export-2015" (list dg-root) #f #t))

(define (dg-export-2015-files-cli)
  (let (options ((cli-create #:options (list-q ((source-dg-root target-directory))))))
    (alist-bind options (source-dg-root target-directory)
      (dg-export-2015-files source-dg-root target-directory))))

(dg-export-2015-files-cli)
